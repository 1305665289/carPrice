{"remainingRequest":"G:\\实训一\\carPrice\\node_modules\\babel-loader\\lib\\index.js!G:\\实训一\\carPrice\\src\\store\\modules\\detail.js","dependencies":[{"path":"G:\\实训一\\carPrice\\src\\store\\modules\\detail.js","mtime":1576485296883},{"path":"G:\\实训一\\carPrice\\.babelrc","mtime":1576483564472},{"path":"G:\\实训一\\carPrice\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\实训一\\carPrice\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCB7IGdldERldGFpbExpc3QgYXMgX2dldERldGFpbExpc3QsIGdldFByaWNlbExpc3QgYXMgX2dldFByaWNlbExpc3QgfSBmcm9tICdAL3NlcnZpY2VzL2luZGV4JzsKdmFyIHN0YXRlID0gewogIGRldGFpbExpc3RzOiBbXSwKICBkZXRhaWxZZWFyOiBbXSwKICAvL+W5tOS7vQogIGFsbFllYXI6ICflhajpg6gnLAogIC8vIOW9k+WJjemAieaLqeW5tOS7vSDkuI7nrZvpgIkv5o6S5bqP5pe25ZG95ZCN5bqU55SoCiAgYWxsWWVhckxpc3Q6IFtdLAogIGV2ZXJ5TGlzdDogW10sCiAgTW9saXN0OiBbXQp9OyAvLyDnu5novabmrL7mjpLluo8KCmZ1bmN0aW9uIHNvcnRDYXJMaXN0KGxpc3QpIHsKICAvLyDmjpLluo/op4TliJkg5o6S6YeP5Y2H5bqPICYmIOWKn+eOh+WNh+W6jyAmJiDoh6rnhLblkLjmsJQ+5rah6L2u5aKe5Y6LCiAgbGlzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICBpZiAoYS5leGhhdXN0X3N0ciA9PSBiLmV4aGF1c3Rfc3RyKSB7CiAgICAgIGlmIChhLm1heF9wb3dlcl9zdHIgPT0gYi5tYXhfcG93ZXJfc3RyKSB7CiAgICAgICAgcmV0dXJuIGIuaW5oYWxlX3R5cGUgPiBhLmluaGFsZV90eXBlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBhLm1heF9wb3dlciAtIGIubWF4X3Bvd2VyOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gYS5leGhhdXN0IC0gYi5leGhhdXN0OwogICAgfQogIH0pOwogIHJldHVybiBsaXN0Owp9IC8vIOagvOW8j+WMluaVsOaNrgoKCmZ1bmN0aW9uIGZvcm1hdENhckxpc3QobGlzdCkgewogIC8vIOaLvOaOpeavj+asvui9pueahGtleSDmjpLph48v5Yqf546HIOWQuOawlOaWueW8jwogIGxpc3QgPSBsaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgaXRlbS5rZXkgPSAiIi5jb25jYXQoaXRlbS5leGhhdXN0X3N0ciwgIi8iKS5jb25jYXQoaXRlbS5tYXhfcG93ZXJfc3RyLCAiICIpLmNvbmNhdChpdGVtLmluaGFsZV90eXBlKTsKICAgIHJldHVybiBpdGVtOwogIH0pOyAvLyBsZXQgbmV3TGlzdCA9IFt7a2V5OiAnJywgbGlzdDogW10gfV07CgogIHZhciBuZXdMaXN0ID0gW107IC8vIOmBjeWOhu+8jOagueaNrmtleeaKiuaVsOaNruiBmuWQiOS4gOS4iwoKICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgIHZhciBpbmRleCA9IG5ld0xpc3QuZmluZEluZGV4KGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUua2V5ID09IGl0ZW0ua2V5OwogICAgfSk7CgogICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICBuZXdMaXN0W2luZGV4XS5saXN0LnB1c2goaXRlbSk7CiAgICB9IGVsc2UgewogICAgICBuZXdMaXN0LnB1c2goewogICAgICAgIGtleTogaXRlbS5rZXksCiAgICAgICAgbGlzdDogW2l0ZW1dCiAgICAgIH0pOwogICAgfQogIH0pOwogIHJldHVybiBuZXdMaXN0Owp9Cgp2YXIgbXV0YXRpb25zID0gewogIGRldGFpbExpc3Q6IGZ1bmN0aW9uIGRldGFpbExpc3Qoc3RhdGUsIHBheWxvYWQpIHsKICAgIHN0YXRlLmRldGFpbExpc3RzID0gcGF5bG9hZC5kYXRhOyAvL+iOt+WPluW5tOS7vQoKICAgIHZhciB5ZWFyID0gc3RhdGUuZGV0YWlsTGlzdHMubGlzdC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgcmV0dXJuIGl0ZW0ubWFya2V0X2F0dHJpYnV0ZS55ZWFyOwogICAgfSk7CiAgICBzdGF0ZS5kZXRhaWxZZWFyID0gQXJyYXkuZnJvbShuZXcgU2V0KHllYXIpKTsgLy/ojrflj5blvZPliY3pgInmi6nnmoTlubTku70KCiAgICB2YXIgYWxsWWVhckxpc3QgPSBbXTsKCiAgICBpZiAoc3RhdGUuYWxsWWVhciA9PSAn5YWo6YOoJykgewogICAgICBhbGxZZWFyTGlzdCA9IHBheWxvYWQuZGF0YS5saXN0OwogICAgfSBlbHNlIHsKICAgICAgYWxsWWVhckxpc3QgPSBwYXlsb2FkLmRhdGEubGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5tYXJrZXRfYXR0cmlidXRlLnllYXIgPT0gc3RhdGUuYWxsWWVhckxpc3Q7CiAgICAgIH0pOwogICAgfSAvL+WvueW9k+WJjeW5tOS7veeahOaVsOaNrui/m+ihjOaOkuW6jwoKCiAgICBhbGxZZWFyTGlzdCA9IHNvcnRDYXJMaXN0KGFsbFllYXJMaXN0KTsgLy8g6IGa5ZCIa2V555u45ZCM55qE6L2m5qy+5pWw5o2uCgogICAgYWxsWWVhckxpc3QgPSBmb3JtYXRDYXJMaXN0KGFsbFllYXJMaXN0KTsKICAgIHN0YXRlLmFsbFllYXJMaXN0ID0gYWxsWWVhckxpc3Q7CiAgICBzdGF0ZS5hbGxZZWFyTGlzdC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgcmV0dXJuIHN0YXRlLmV2ZXJ5TGlzdCA9IGl0ZW0ubGlzdDsKICAgIH0pOwogIH0sCiAgZGV0YWlsTW9MaXN0OiBmdW5jdGlvbiBkZXRhaWxNb0xpc3Qoc3RhdGUsIHBheWxvYWQpIHsKICAgIHN0YXRlLk1vbGlzdCA9IHBheWxvYWQ7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICBnZXREZXRhaWxMaXN0OiBmdW5jdGlvbiBnZXREZXRhaWxMaXN0KF9yZWYsIHBheWxvYWQpIHsKICAgIHZhciBjb21taXQsIHJlczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0RGV0YWlsTGlzdCQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChfZ2V0RGV0YWlsTGlzdChwYXlsb2FkKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBjb21taXQoJ2RldGFpbExpc3QnLCByZXMpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIGdldFByaWNlbExpc3Q6IGZ1bmN0aW9uIGdldFByaWNlbExpc3QoX3JlZjIpIHsKICAgIHZhciBjb21taXQsIHJlczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0UHJpY2VsTGlzdCQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF9nZXRQcmljZWxMaXN0KCkpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChjb21taXQoImRldGFpbE1vTGlzdCIsIHJlcy5kYXRhKSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBhY3Rpb25zOiBhY3Rpb25zCn07"},{"version":3,"sources":["G:/实训一/carPrice/src/store/modules/detail.js"],"names":["getDetailList","getPricelList","state","detailLists","detailYear","allYear","allYearList","everyList","Molist","sortCarList","list","sort","a","b","exhaust_str","max_power_str","inhale_type","max_power","exhaust","formatCarList","map","item","key","newList","forEach","index","findIndex","value","push","mutations","detailList","payload","data","year","market_attribute","Array","from","Set","filter","detailMoList","actions","commit","res","namespaced"],"mappings":"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","sourcesContent":["import {getDetailList,getPricelList} from '@/services/index'\r\n\r\nconst state = {\r\n    detailLists:[],\r\n    detailYear:[], //年份\r\n    allYear: '全部',    // 当前选择年份 与筛选/排序时命名应用\r\n    allYearList:[],\r\n    everyList:[],\r\n    Molist:[]\r\n}\r\n\r\n// 给车款排序\r\nfunction sortCarList(list){\r\n    // 排序规则 排量升序 && 功率升序 && 自然吸气>涡轮增压\r\n    list.sort((a, b)=>{\r\n        if (a.exhaust_str == b.exhaust_str){\r\n            if (a.max_power_str == b.max_power_str){\r\n                return b.inhale_type > a.inhale_type;\r\n            }else{\r\n                return a.max_power - b.max_power;\r\n            }\r\n        }else{\r\n            return a.exhaust - b.exhaust;\r\n        }\r\n    })\r\n    return list;\r\n}\r\n\r\n// 格式化数据\r\nfunction formatCarList(list){\r\n    // 拼接每款车的key 排量/功率 吸气方式\r\n    list = list.map(item=>{\r\n        item.key = `${item.exhaust_str}/${item.max_power_str} ${item.inhale_type}`;\r\n        return item;\r\n    })\r\n    // let newList = [{key: '', list: [] }];\r\n    let newList = [];\r\n    \r\n    // 遍历，根据key把数据聚合一下\r\n    list.forEach(item=>{\r\n        let index = newList.findIndex(value=>value.key == item.key);\r\n        if (index !== -1){\r\n            newList[index].list.push(item);\r\n        }else{\r\n            newList.push({\r\n                key: item.key,\r\n                list: [item]\r\n            })\r\n        }\r\n    })\r\n    return newList;\r\n}\r\n\r\nconst mutations = {\r\n    detailList(state,payload){\r\n        state.detailLists=payload.data;\r\n\r\n        //获取年份\r\n        let year=state.detailLists.list.map(item=>item.market_attribute.year);\r\n        state.detailYear=Array.from(new Set(year));\r\n        \r\n        //获取当前选择的年份\r\n        let allYearList=[];\r\n        if(state.allYear=='全部'){\r\n            allYearList=payload.data.list\r\n        }else{\r\n            allYearList=payload.data.list.filter(item=>item.market_attribute.year==state.allYearList)\r\n        }\r\n\r\n        //对当前年份的数据进行排序\r\n        allYearList = sortCarList(allYearList);\r\n\r\n        // 聚合key相同的车款数据\r\n        allYearList = formatCarList(allYearList);\r\n        state.allYearList = allYearList;\r\n        \r\n        state.allYearList.map(item=>{\r\n            return state.everyList=item.list\r\n        })\r\n    },\r\n    detailMoList(state,payload){\r\n        state.Molist=payload\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    async getDetailList({commit}, payload){\r\n        let res = await getDetailList(payload);\r\n        commit('detailList', res);\r\n    },\r\n    async getPricelList({commit}){\r\n        let res = await getPricelList();\r\n        await commit(\"detailMoList\",res.data)\r\n    } \r\n}\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    mutations,\r\n    actions\r\n}\r\n"]}]}